
Todo:
    + Make Serde skip over redundant fields in GameTreeNode and Board.
        + Add methods to fill in their contents from the serialized fields.
    + Make it mark illegal moves (i.e. ko violations) somehow.


Normal mode:
    - Draw bg, board, stones, immortality markers, and last move marker.
    - 

    - Normal mode:
        - Draw hover stone.
    - 



Desired user experience:
    1. I open an "analysis file" using the Stones analyzer.
    2. On the screen, I see a board with an intial position on it. 
    3. I can manipulate the position with the mouse and navigate through an existing
       tree of positions, with branches being added automatically if I go off the
       existing tree.
    4. Associated with each position is an initially empty text field which I can
       type notes into that are remembered the next time I open the file.
    5. Each position additionally contains

Analysis file format:
    Board structure (list of edges)
    Layout (list of locations)
    Initial position (list of colors)
    ...marked-up tree in JSON format...

Example:
    {
        "board-structure": [[1, 2], [2, 3], [3, 4], [4, 1]],
        "board-layout": [[-1.0, -1.0], [-1.0, 1.0], [1.0, 1.0], [1.0, -1.0]],
        "initial-position": [".", ".", ".", "."],

        "analysis-tree": {
            "comment": "This is the initial position",
            "markup": ["*", "", "", ""],
            "children": {
                "1": {
                    "comment": "This is black's first move",
                    "markup": ["", "", "*", ""]
                },
                "2": {
                    "comment": "This is equivalent to the other move.",
                    "markup": ["", "", "", ""]
                }
            }
        }
    }



\   \   | '\'
    "   | '"'
    n   | '\n'
    .   | ERROR
"       | end text
\n      | ERROR
.       | whatever . is




Old, maybe faster algorithm for updating the chains after adding a newly-placed stone to the board:

        // Create a sorted, de-dupped list of all the ID's of the same-colored
        // chains this move was adjacent to (there can be zero or more of these).

        //let mut adjacent_chain_ids: Vec<usize> =
            //self.board.neighbor_lists[point].iter()
                //.filter(|&&n| self.board_state[n] == color)
                //.map(|&n| self.chain_id_backref[n])
                //.collect();

        //adjacent_chain_ids.sort();
        //adjacent_chain_ids.dedup();

        // If there were no chains adjacent to this move, get a fresh chain ID
        // and consider the move "adjacent" to that chain.

        //let dest_chain = match adjacent_chain_ids.len() {
            //0 => self.fresh_chain_id(color),
            //_ => adjacent_chain_ids.swap_remove(0),
        //};

        // Put this stone on the board; push it onto the destination chain.

        //self.board_state[point] = color;
        //self.chains[color as usize][dest_chain].push(point);

        // Drain all the other chains in the list into the first one.

        //let mut temp = Vec::<usize>::new();

        //for chain_id in adjacent_chain_ids {
            //temp.append(&mut self.chains[color as usize][chain_id]);
            //self.chains[color as usize][dest_chain].append(&mut temp);
        //}

        // ...and update the backref for all points in this chain.

        //for point in &self.chains[color as usize][dest_chain] { 
            //self.chain_id_backref[*point] = dest_chain;
        //}

